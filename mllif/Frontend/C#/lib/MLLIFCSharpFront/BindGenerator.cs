using System.Text;
using Microsoft.CodeAnalysis;

namespace MLLIFCSharpFront;

[Generator(LanguageNames.CSharp)]
public class BindGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("ExportAttribute.cs",
                """
                // <auto-generated />
                using System;

                namespace MLLIF {
                    [AttributeUsage(AttributeTargets.Method, AllowMultiple=false, Inherited=false)]
                    internal sealed class ExportAttribute : Attribute {}
                }
                """);
        });

        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            "MLLIF.ExportAttribute",
            static (_,       _) => true,
            static (context, _) => context);

        context.RegisterSourceOutput(source, Emit);
    }

    private static string ToNativeType(ITypeSymbol type)
    {
        if (type.IsReferenceType)
            return "System.IntPtr";

        return type.ToDisplayString();
    }

    private static Diagnostic CannotMangle(IMethodSymbol method)
        => Diagnostic.Create(
            "MLLIF02", "",
            $"'{method.ToDisplayString()}' cannot be mangled",
            DiagnosticSeverity.Error, DiagnosticSeverity.Error,
            true, 0);

    private void Emit(SourceProductionContext spc, GeneratorAttributeSyntaxContext gasc)
    {
        var symbol = (IMethodSymbol)gasc.TargetSymbol;

        if (symbol.MangleName(spc) is not { } mangling)
        {
            spc.ReportDiagnostic(CannotMangle(symbol));
            return;
        }

        var builder = new StringBuilder();

        builder.Append("\tpublic delegate ");
        builder.Append(ToNativeType(symbol.ReturnType));
        builder.Append(" __delegate");
        builder.Append(mangling);
        builder.Append('(');

        if (!symbol.IsStatic)
        {
            builder.Append("System.IntPtr self");
            if (symbol.Parameters.Length > 0)
                builder.Append(", ");
        }

        for (var i = 0; i < symbol.Parameters.Length; i++)
        {
            if (i > 0)
                builder.Append(", ");

            var param = symbol.Parameters[i];
            builder
                .Append(ToNativeType(param.Type))
                .Append(' ')
                .Append(param.Name);
        }

        builder.Append(");\n");
        
        
        builder.Append("\tpublic static ");
        builder.Append(ToNativeType(symbol.ReturnType));
        builder.Append(' ');
        builder.Append(mangling);
        builder.Append('(');

        if (!symbol.IsStatic)
        {
            builder.Append("System.IntPtr self");
            if (symbol.Parameters.Length > 0)
                builder.Append(", ");
        }

        for (var i = 0; i < symbol.Parameters.Length; i++)
        {
            if (i > 0)
                builder.Append(", ");

            var param = symbol.Parameters[i];
            builder
                .Append(ToNativeType(param.Type))
                .Append(' ')
                .Append(param.Name);
        }

        builder.Append(") {\n");

        if (!symbol.IsStatic)
            builder.Append("\t\tvar handle = System.Runtime.InteropServices.GCHandle.FromIntPtr(self);\n");

        builder.Append("\t\treturn ");

        if (symbol.ReturnType.IsReferenceType)
        {
            builder.Append("System.Runtime.InteropServices.GCHandle.ToIntPtr(");
            builder.Append("System.Runtime.InteropServices.GCHandle.Alloc(");
        }

        if (!symbol.IsStatic)
            builder.Append("(handle.Target as ").Append(symbol.ContainingType.ToDisplayString()).Append(").");

        builder.Append(symbol.Name).Append('(');

        for (var i = 0; i < symbol.Parameters.Length; i++)
        {
            if (i > 0)
                builder.Append(", ");

            var param = symbol.Parameters[i];

            if (param.Type.IsReferenceType)
                builder.Append("System.Runtime.InteropServices.GCHandle.FromIntPtr(");
            builder.Append(param.Name);
            if (param.Type.IsReferenceType)
                builder.Append(").Target as ").Append(param.Type.ToDisplayString());
        }

        if (symbol.ReturnType.IsReferenceType)
            builder.Append("))");

        builder.Append(");\n");

        builder.Append("\t}\n");

        spc.AddSource($"{symbol.ContainingType.Name}.{symbol.Name}.g.cs",
            $$"""
              namespace {{symbol.ContainingType.ContainingNamespace.ToDisplayString()}};
                  
              public partial class {{symbol.ContainingType.Name}} {
              {{builder}}
              }
              """);
    }
}